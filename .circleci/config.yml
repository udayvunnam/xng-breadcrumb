version: 2.1

aliases:
  - &defaults
    working_directory: ~/repo
    docker:
      - image: circleci/node:12-browsers
  - &set_env
    name: Setup Environment Variables
    command: |
      if [[ $CIRCLE_PULL_REQUEST ]]
      then
        echo 'Fetching Base Commit from GitHub'
        echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
        source $BASH_ENV
        echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
        echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
      else
        echo 'Fetching Base Commit from Deploy Cache'
        if [[ ! -f dist/last-deploy.txt ]]
        then
          mkdir dist && git rev-parse HEAD~1 > dist/last-deploy.txt
        fi
        echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
      fi
      source $BASH_ENV
      echo $AFFECTED_ARGS
  - &yarn_cache
    keys:
      - node-deps-node12-{{ checksum "yarn.lock" }}
      # fallback to using the latest cache if no exact match is found
      - node-deps-node12-
  - &deploy_cache
    key: last-deploy-sha
  - &yarn_install
    name: Install Dependencies
    command: yarn install --frozen-lockfile --non-interactive

# -----------------------------------------------------------------------------------------
# Job definitions. Jobs which are defined just here, will not run automatically. Each job
# must be part of a workflow definition in order to run for PRs and push builds.
# -----------------------------------------------------------------------------------------
jobs:
  install:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *yarn_cache
      - run:
          <<: *yarn_install
      - save_cache:
          key: node-deps-node12-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
            - node_modules
  check-formatting:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn format:check ${AFFECTED_ARGS}
  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: ./node_modules/.bin/nx workspace-lint
      - run: yarn affected:lint ${AFFECTED_ARGS} --parallel
      - run:
          name: Define environment variable with lastest commit's message
          command: |
            echo 'export COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Lint commit message
          command: echo "$COMMIT_MESSAGE" | npx commitlint
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:build ${AFFECTED_ARGS} --parallel --configuration production
      - save_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
          paths:
            - dist
      - store_artifacts:
          path: dist
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:test ${AFFECTED_ARGS} --parallel --ci --code-coverage
  e2e:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn affected:e2e ${AFFECTED_ARGS} --configuration production --headless
      - store_artifacts:
          path: dist/cypress

  deploy:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - restore_cache:
          key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
      - run: yarn affected --target deploy ${AFFECTED_ARGS}
      - run: git rev-parse HEAD > dist/last-deploy.txt
      - save_cache:
          key: last-deploy-sha
          paths:
            - dist/last-deploy.txt

  publish:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          <<: *deploy_cache
      - run:
          <<: *set_env
      - restore_cache:
          <<: *yarn_cache
      - run: yarn copy-readme
      - run: yarn version
      - run: yarn push-tags
      - run:
          name: Authenticate with npm registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/repo/.npmrc
      - run:
          name: Publish library to npm
          command: npm publish ./dist/libs/xng-breadcrumb

workflows:
  version: 2
  pr_check:
    jobs:
      - install
      - check-formatting:
          requires:
            - install
      - lint:
          requires:
            - install
      - test:
          requires:
            - install
      - build:
          requires:
            - install
      - e2e:
          requires:
            - install
      - deploy:
          filters:
            branches:
              only:
                - master
          requires:
            - check-formatting
            - lint
            - test
            - build
            - e2e
      - publish:
          requires:
            - deploy
          filters:
            tags:
              only: /^v.*/ # runs for no branches and only for tags starting with 'v'
            branches:
              ignore: /.*/
